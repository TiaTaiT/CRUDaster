@page "/pim"
@inherits BaseEntityPage<PimDto>
@using CRUDaster.Components.Dialogs
@using CRUDaster.Core.Application.DTOs
@inject HttpClient HttpClient

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">P&Ms</MudText>

    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => ShowCreateItemDialog())"
                           Class="mb-4">
                    Add New PIM
                </MudButton>
            </MudItem>
            <MudItem xs="12" md="6" Class="d-flex justify-end">
                <MudTextField @bind-Value="SearchString"
                              Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (Loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (Items == null || !Items.Any())
    {
        <MudAlert Severity="Severity.Info">No PIMs found.</MudAlert>
    }
    else
    {
        <MudTable Items="@Items"
                  Dense="true"
                  Hover="true"
                  Bordered="true"
                  Striped="true"
                  Filter="FilterFunc"
                  Loading="@Loading">
            <ColGroup>
                <col style="width: 40px;" />
                <col style="width: 15%;" />
                <col style="width: 20%;" />
                <col style="width: 50%;" />
                <col style="width: 10%;" />
                <col style="width: 5%;" />
                <col style="width: 100px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Content</MudTh>
                <MudTh>Creator</MudTh>
                <MudTh>Created</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Content">
                    @{
                        var truncatedContent = context.Content.Length > 100
                        ? context.Content.Substring(0, 100) + "..."
                        : context.Content;
                    }
                    <MudTooltip Text="@context.Content">
                        <span>@truncatedContent</span>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Creator">@context.CreatorId</MudTd>
                <MudTd DataLabel="Created">@context.CreatedAt.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Title="Edit"
                                       OnClick="@(() => ShowEditItemDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       Title="Delete"
                                       OnClick="@(() => ShowDeleteDialog(context.Name, context.Id))" />
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    protected override string ApiEndpoint => "api/pim";

    protected override bool FilterFunc(PimDto dto)
    {
        return string.IsNullOrWhiteSpace(SearchString)
            || dto.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
            || (dto.Description?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || dto.Content.Contains(SearchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task ShowCreateItemDialog()
    {
        var parameters = new DialogParameters
        {
            ["OnCreate"] = EventCallback.Factory.Create<PimCreateDto>(this, HandleCreate)
        };

        var dialog = await DialogService.ShowAsync<PimDialog>("Create item", parameters);
        await dialog.Result;
    }

    private async Task ShowEditItemDialog(PimDto pim)
    {
        var parameters = new DialogParameters
        {
            ["Dto"] = pim,
            ["OnUpdate"] = EventCallback.Factory.Create<PimUpdateDto>(this, HandleUpdate)
        };

        var dialog = await DialogService.ShowAsync<PimDialog>("Edit item", parameters);
        await dialog.Result;
    }

    private async Task HandleCreate(PimCreateDto createDto)
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync(ApiEndpoint, createDto);
            response.EnsureSuccessStatusCode();
            await LoadData();
            Snackbar.Add("Item created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating item: {ex.Message}", Severity.Error);
            throw;
        }
    }

    private async Task HandleUpdate(PimUpdateDto updateDto)
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{ApiEndpoint}/{updateDto.Id}", updateDto);
            response.EnsureSuccessStatusCode();
            await LoadData();
            Snackbar.Add("Item updated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating item: {ex.Message}", Severity.Error);
            throw;
        }
    }
}